---
jobs:
- name: test-domains-broker
  plan:
  - get: broker-src
    trigger: true
  - task: run-tests
    file: broker-src/ci/run-tests.yml

- name: deploy-development
  plan:
  - aggregate:
    - get: broker-src
      passed: [test-domains-broker]
      trigger: true
    - get: pipeline-tasks
    - get: broker-release
      trigger: true
    - get: stemcell
      trigger: true
    - get: terraform-yaml
      resource: terraform-yaml-development
    - get: common-development
      trigger: true
  - task: terraform-secrets
    file: broker-src/ci/terraform-secrets.yml
  - put: development-deployment
    params:
      stemcells:
      - stemcell/*.tgz
      releases:
      - broker-release/*.tgz
      manifest: broker-src/bosh/manifest.yml
      vars_files:
      - terraform-secrets/terraform.yml
      - common-development/domain-broker-development-decrypted.yml
  - task: update-broker
    file: pipeline-tasks/register-service-broker.yml
    params:
      <<: *cf-creds-development
      BROKER_NAME: domains-broker
      BROKER_URL: ((broker-url-development))
      AUTH_USER: ((domains-broker-user-development))
      AUTH_PASS: ((domains-broker-pass-development))
      SERVICES: custom-domain
  on_failure:
    put: slack
    params:
      text: |
        :x: FAILED to deploy cf-domains-service-broker on ((cf-api-url-development))
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: ((slack-channel))
      username: ((slack-username))
      icon_url: ((slack-icon-url))
  on_success:
    put: slack
    params:
      text: |
        :white_check_mark: Successfully deployed cf-domains-service-broker on ((cf-api-url-development))
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: ((slack-channel))
      username: ((slack-username))
      icon_url: ((slack-icon-url))

- name: acceptance-tests-development
  serial: true
  plan:
  - get: broker-src
    passed: [deploy-development]
    trigger: true
  - aggregate:
    - task: acceptance-tests-http-01
      file: broker-src/ci/acceptance-tests.yml
      params: &acceptance-tests-params-development
        <<: *cf-creds-development
        SERVICE_NAME: custom-domain
        PLAN_NAME: custom-domain
        SERVICE_INSTANCE_NAME: domains-acceptance-test-%s
        CHALLENGE_TYPE: HTTP-01
        AWS_ACCESS_KEY_ID: ((domains-broker-access-key-id-acceptance-development))
        AWS_SECRET_ACCESS_KEY: ((domains-broker-secret-access-key-acceptance-development))
        HOSTED_ZONE_ID: ((hosted-zone-id-development))
        DOMAIN: ((domain-url-development))
        DOMAINS_TIMEOUT: ((domains-timeout))
        CA_CERT: ((acceptance-test-ca-cert-development))
        DELETE_SERVICE: ((acceptance-test-delete-service-development))
    - task: acceptance-tests-dns-01
      file: broker-src/ci/acceptance-tests.yml
      params:
        <<: *acceptance-tests-params-development
        CHALLENGE_TYPE: DNS-01


- name: deploy-staging
  plan:
  - aggregate:
    - get: broker-src
      passed: [test-domains-broker]
      trigger: true
    - get: pipeline-tasks
    - get: broker-release
      trigger: true
    - get: stemcell
      trigger: true
    - get: terraform-yaml
      resource: terraform-yaml-staging
    - get: common-staging
      trigger: true
  - task: terraform-secrets
    file: broker-src/ci/terraform-secrets.yml
  - put: staging-deployment
    params:
      stemcells:
      - stemcell/*.tgz
      releases:
      - broker-release/*.tgz
      manifest: broker-src/bosh/manifest.yml
      vars_files:
      - terraform-secrets/terraform.yml
      - common-staging/domain-broker-staging-decrypted.yml
  - task: update-broker
    file: pipeline-tasks/register-service-broker.yml
    params:
      <<: *cf-creds-staging
      BROKER_NAME: domains-broker
      BROKER_URL: ((broker-url-staging))
      AUTH_USER: ((domains-broker-user-staging))
      AUTH_PASS: ((domains-broker-pass-staging))
      SERVICES: custom-domain
  on_failure:
    put: slack
    params:
      text: |
        :x: FAILED to deploy cf-domains-service-broker on ((cf-api-url-staging))
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: ((slack-channel))
      username: ((slack-username))
      icon_url: ((slack-icon-url))
  on_success:
    put: slack
    params:
      text: |
        :white_check_mark: Successfully deployed cf-domains-service-broker on ((cf-api-url-staging))
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: ((slack-channel))
      username: ((slack-username))
      icon_url: ((slack-icon-url))

- name: acceptance-tests-staging
  serial: true
  plan:
  - get: broker-src
    passed: [deploy-staging]
    trigger: true
  - get: broker-release
  - get: stemcell
  - aggregate:
    - task: acceptance-tests-http-01
      file: broker-src/ci/acceptance-tests.yml
      params: &acceptance-tests-params-staging
        <<: *cf-creds-staging
        SERVICE_NAME: custom-domain
        PLAN_NAME: custom-domain
        SERVICE_INSTANCE_NAME: domains-acceptance-test-%s
        AWS_ACCESS_KEY_ID: ((domains-broker-access-key-id-acceptance-staging))
        AWS_SECRET_ACCESS_KEY: ((domains-broker-secret-access-key-acceptance-staging))
        CHALLENGE_TYPE: HTTP-01
        HOSTED_ZONE_ID: ((hosted-zone-id-staging))
        DOMAIN: ((domain-url-staging))
        DOMAINS_TIMEOUT: ((domains-timeout))
        CA_CERT: ((acceptance-test-ca-cert-staging))
        DELETE_SERVICE: ((acceptance-test-delete-service-staging))
    - task: acceptance-tests-dns-01
      file: broker-src/ci/acceptance-tests.yml
      params:
        <<: *acceptance-tests-params-staging
        CHALLENGE_TYPE: DNS-01

- name: deploy-production
  plan:
  - aggregate:
    - get: broker-src
      passed: [acceptance-tests-staging]
      trigger: true
    - get: pipeline-tasks
    - get: broker-release
      passed: [acceptance-tests-staging]
      trigger: true
    - get: stemcell
      passed: [acceptance-tests-staging]
      trigger: true
    - get: terraform-yaml
      resource: terraform-yaml-production
    - get: common-production
      trigger: true
  - task: terraform-secrets
    file: broker-src/ci/terraform-secrets.yml
  - put: production-deployment
    params:
      stemcells:
      - stemcell/*.tgz
      releases:
      - broker-release/*.tgz
      manifest: broker-src/bosh/manifest.yml
      vars_files:
      - terraform-secrets/terraform.yml
      - common-production/domain-broker-production-decrypted.yml
  - task: update-broker
    file: pipeline-tasks/register-service-broker.yml
    params:
      <<: *cf-creds-production
      BROKER_NAME: domains-broker
      BROKER_URL: ((broker-url-production))
      AUTH_USER: ((domains-broker-user-production))
      AUTH_PASS: ((domains-broker-pass-production))
      SERVICES: custom-domain
  on_failure:
    put: slack
    params:
      text: |
        :x: FAILED to deploy cf-domains-service-broker on ((cf-api-url-production))
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: ((slack-channel))
      username: ((slack-username))
      icon_url: ((slack-icon-url))
  on_success:
    put: slack
    params:
      text: |
        :white_check_mark: Successfully deployed cf-domains-service-broker on ((cf-api-url-production))
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: ((slack-channel))
      username: ((slack-username))
      icon_url: ((slack-icon-url))

- name: acceptance-tests-production
  serial: true
  plan:
  - get: broker-src
    passed: [deploy-production]
    trigger: true
  - aggregate:
    - task: acceptance-tests-http-01
      file: broker-src/ci/acceptance-tests.yml
      params: &acceptance-tests-params-production
        <<: *cf-creds-production
        SERVICE_NAME: custom-domain
        PLAN_NAME: custom-domain
        SERVICE_INSTANCE_NAME: domains-acceptance-test-%s
        CHALLENGE_TYPE: HTTP-01
        AWS_ACCESS_KEY_ID: ((domains-broker-access-key-id-acceptance-production))
        AWS_SECRET_ACCESS_KEY: ((domains-broker-secret-access-key-acceptance-production))
        HOSTED_ZONE_ID: ((hosted-zone-id-production))
        DOMAIN: ((domain-url-production))
        DOMAINS_TIMEOUT: ((domains-timeout))
        DELETE_SERVICE: ((acceptance-test-delete-service-production))
    - task: acceptance-tests-dns-01
      file: broker-src/ci/acceptance-tests.yml
      params:
        <<: *acceptance-tests-params-production
        CHALLENGE_TYPE: DNS-01


resources:
- name: broker-src
  type: git
  source:
    uri: ((cf-domains-broker-git-url))
    branch: ((cf-domains-broker-git-branch))

- name: pipeline-tasks
  type: git
  source:
    uri: ((pipeline-tasks-git-url))
    branch: ((pipeline-tasks-git-branch))

- name: broker-release
  type: s3-iam
  source:
    bucket: ((bosh-releases-bucket))
    region_name: ((aws-region))
    regexp: domain-broker-(.*).tgz

- name: stemcell
  type: bosh-io-stemcell
  source:
    name: bosh-aws-xen-hvm-ubuntu-trusty-go_agent

- name: terraform-yaml-development
  type: s3-iam
  source:
    bucket: ((tf-state-bucket))
    versioned_file: ((tf-state-file-development))
    region_name: ((aws-region))

- name: common-development
  type: s3-iam
  source:
    bucket: ((secrets-bucket-development))
    versioned_file: domain-broker-development-decrypted.yml
    aws_region: ((aws-region))

- name: terraform-yaml-staging
  type: s3-iam
  source:
    bucket: ((tf-state-bucket))
    versioned_file: ((tf-state-file-staging))
    region_name: ((aws-region))

- name: common-staging
  type: s3-iam
  source:
    bucket: ((secrets-bucket-staging))
    versioned_file: domain-broker-staging-decrypted.yml
    region_name: ((aws-region))

- name: development-deployment
  type: bosh-deployment
  source:
    target: ((bosh-target-development))
    client: ((bosh-client-development))
    client_secret: ((bosh-client-secret-development))
    ca_cert: ((ca-cert))
    deployment: domain-broker

- name: staging-deployment
  type: bosh-deployment
  source:
    target: ((bosh-target-staging))
    client: ((bosh-client-staging))
    client_secret: ((bosh-client-secret-staging))
    ca_cert: ((ca-cert))
    deployment: domain-broker

- name: production-deployment
  type: bosh-deployment
  source:
    target: ((bosh-target-production))
    client: ((bosh-client-production))
    client_secret: ((bosh-client-secret-production))
    ca_cert: ((ca-cert))
    deployment: domain-broker

- name: common-production
  type: s3-iam
  source:
    bucket: ((secrets-bucket-production))
    versioned_file: domain-broker-production-decrypted.yml
    region_name: ((aws-region))

- name: terraform-yaml-production
  type: s3-iam
  source:
    bucket: ((tf-state-bucket))
    versioned_file: ((tf-state-file-production))
    region_name: ((aws-region))

- name: slack
  type: slack-notification
  source:
    url: ((slack-webhook-url))

resource_types:
- name: s3-iam
  type: docker-image
  source:
    repository: 18fgsa/s3-resource

- name: bosh-deployment
  type: docker-image
  source:
    repository: cloudfoundry/bosh-deployment-resource

- name: slack-notification
  type: docker-image
  source:
    repository: cfcommunity/slack-notification-resource

meta:
  cf-creds-development: &cf-creds-development
    CF_API_URL: ((cf-api-url-development))
    CF_USERNAME: ((cf-deploy-username-development))
    CF_PASSWORD: ((cf-deploy-password-development))
    CF_ORGANIZATION: ((cf-organization-development))
    CF_SPACE: ((cf-space-development))
  cf-creds-staging: &cf-creds-staging
    CF_API_URL: ((cf-api-url-staging))
    CF_USERNAME: ((cf-deploy-username-staging))
    CF_PASSWORD: ((cf-deploy-password-staging))
    CF_ORGANIZATION: ((cf-organization-staging))
    CF_SPACE: ((cf-space-staging))
  cf-creds-production: &cf-creds-production
    CF_API_URL: ((cf-api-url-production))
    CF_USERNAME: ((cf-deploy-username-production))
    CF_PASSWORD: ((cf-deploy-password-production))
    CF_ORGANIZATION: ((cf-organization-production))
    CF_SPACE: ((cf-space-production))
